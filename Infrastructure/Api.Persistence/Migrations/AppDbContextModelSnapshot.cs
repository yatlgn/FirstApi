// <auto-generated />
using System;
using Api.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Api.Domain.Entities.Coach", b =>
                {
                    b.Property<int>("CoachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoachId"));

                    b.Property<int>("Branch")
                        .HasColumnType("int");

                    b.Property<int>("Brevet")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CoachId");

                    b.ToTable("Coach");
                });

            modelBuilder.Entity("Api.Domain.Entities.CoachGymnast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int?>("CoachId1")
                        .HasColumnType("int");

                    b.Property<int>("GymnastId")
                        .HasColumnType("int");

                    b.Property<int?>("GymnastId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("CoachId1");

                    b.HasIndex("GymnastId");

                    b.HasIndex("GymnastId1");

                    b.ToTable("CoachGymnast");
                });

            modelBuilder.Entity("Api.Domain.Entities.Competition", b =>
                {
                    b.Property<int>("CompetitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompetitionId"));

                    b.Property<DateTime>("CompetitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompetitionHall")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompetitionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompetitionType")
                        .HasColumnType("int");

                    b.HasKey("CompetitionId");

                    b.ToTable("Competition");
                });

            modelBuilder.Entity("Api.Domain.Entities.CompetitionGymnast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetitionId1")
                        .HasColumnType("int");

                    b.Property<int>("GymnastId")
                        .HasColumnType("int");

                    b.Property<int?>("GymnastId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CompetitionId1");

                    b.HasIndex("GymnastId");

                    b.HasIndex("GymnastId1");

                    b.ToTable("CompetitionGymnast");
                });

            modelBuilder.Entity("Api.Domain.Entities.Difficulty", b =>
                {
                    b.Property<string>("DifficultyName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("DifficultyPoint")
                        .HasColumnType("float");

                    b.Property<int>("DifficultyType")
                        .HasColumnType("int");

                    b.HasKey("DifficultyName");

                    b.ToTable("Difficulty");
                });

            modelBuilder.Entity("Api.Domain.Entities.Gymnast", b =>
                {
                    b.Property<int>("GymnastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GymnastId"));

                    b.Property<double>("BMI")
                        .HasColumnType("float");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("GymnastId");

                    b.ToTable("Gymnast");
                });

            modelBuilder.Entity("Api.Domain.Entities.GymnastParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GymnastId")
                        .HasColumnType("int");

                    b.Property<int?>("GymnastId1")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GymnastId");

                    b.HasIndex("GymnastId1");

                    b.HasIndex("ParentId");

                    b.HasIndex("ParentId1");

                    b.ToTable("GymnastParent");
                });

            modelBuilder.Entity("Api.Domain.Entities.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentId"));

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PhoneNum")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ParentId");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("Api.Domain.Entities.Series", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesId"));

                    b.Property<double>("SeriesMinute")
                        .HasColumnType("float");

                    b.Property<DateTime>("SeriesReceivingDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPoint")
                        .HasColumnType("float");

                    b.HasKey("SeriesId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Api.Domain.Entities.Workout", b =>
                {
                    b.Property<int>("WorkoutType")
                        .HasColumnType("int");

                    b.Property<string>("WorkoutDays")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("WorkoutHours")
                        .HasColumnType("float");

                    b.HasKey("WorkoutType");

                    b.ToTable("Workout");
                });

            modelBuilder.Entity("Api.Domain.Entities.CoachGymnast", b =>
                {
                    b.HasOne("Api.Domain.Entities.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.Coach", null)
                        .WithMany("CoachGymnast")
                        .HasForeignKey("CoachId1");

                    b.HasOne("Api.Domain.Entities.Gymnast", "Gymnast")
                        .WithMany()
                        .HasForeignKey("GymnastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.Gymnast", null)
                        .WithMany("CoachGymnasts")
                        .HasForeignKey("GymnastId1");

                    b.Navigation("Coach");

                    b.Navigation("Gymnast");
                });

            modelBuilder.Entity("Api.Domain.Entities.CompetitionGymnast", b =>
                {
                    b.HasOne("Api.Domain.Entities.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.Competition", null)
                        .WithMany("CompetitionGymnast")
                        .HasForeignKey("CompetitionId1");

                    b.HasOne("Api.Domain.Entities.Gymnast", "Gymnast")
                        .WithMany()
                        .HasForeignKey("GymnastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.Gymnast", null)
                        .WithMany("CompetitionGymnasts")
                        .HasForeignKey("GymnastId1");

                    b.Navigation("Competition");

                    b.Navigation("Gymnast");
                });

            modelBuilder.Entity("Api.Domain.Entities.GymnastParent", b =>
                {
                    b.HasOne("Api.Domain.Entities.Gymnast", "Gymnast")
                        .WithMany()
                        .HasForeignKey("GymnastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.Gymnast", null)
                        .WithMany("GymnastParent")
                        .HasForeignKey("GymnastId1");

                    b.HasOne("Api.Domain.Entities.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.Parent", null)
                        .WithMany("GymnastParent")
                        .HasForeignKey("ParentId1");

                    b.Navigation("Gymnast");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Api.Domain.Entities.Coach", b =>
                {
                    b.Navigation("CoachGymnast");
                });

            modelBuilder.Entity("Api.Domain.Entities.Competition", b =>
                {
                    b.Navigation("CompetitionGymnast");
                });

            modelBuilder.Entity("Api.Domain.Entities.Gymnast", b =>
                {
                    b.Navigation("CoachGymnasts");

                    b.Navigation("CompetitionGymnasts");

                    b.Navigation("GymnastParent");
                });

            modelBuilder.Entity("Api.Domain.Entities.Parent", b =>
                {
                    b.Navigation("GymnastParent");
                });
#pragma warning restore 612, 618
        }
    }
}
